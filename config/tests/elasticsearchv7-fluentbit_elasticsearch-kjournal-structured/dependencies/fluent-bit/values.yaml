testFramework:
  enabled: false

config:
  inputs: |
    [INPUT]
        Name              tail
        Tag               kube.*
        Path              /var/log/containers/*.log
        Parser            cri
        DB                /var/log/flb_kube-fwd.db
        Refresh_Interval  5
        Skip_Long_Lines   On
        Mem_Buf_Limit     5MB
        Read_from_Head    True

    [INPUT]
        Name              tail
        Path              /var/log/kubernetes/kube-apiserver-audit.log
        Parser            docker
        DB                /var/log/audit-fwd.db
        Tag               audit.*
        Refresh_Interval  5
        Mem_Buf_Limit     35MB
        Buffer_Chunk_Size 2MB
        Buffer_Max_Size   10MB
        Skip_Long_Lines   On
        Key               kubernetes-audit
        Read_from_Head    True

  outputs: |
    [OUTPUT]
        Name            es
        Match           kube.*
        Host            elasticsearch-master
        Port            9200
        Time_Key        metadata.creationTimestamp
        Logstash_Format On
        Replace_Dots    On
        Logstash_Prefix container
        Type            _doc
    
    [OUTPUT]
        Name            es
        Match           audit.*
        Host            elasticsearch-master
        Port            9200
        Logstash_Format On
        Replace_Dots    On
        Logstash_Prefix audit
        Type            _doc

  service: |
    [SERVICE]
        Flush 1
        Daemon Off
        Log_Level info
        Parsers_File parsers.conf
        HTTP_Server On
        HTTP_Listen 0.0.0.0
        HTTP_Port 2020

  filters: |
    [FILTER]
        Name parser
        Match kube.*
        Preserve_Key Off
        Key_Name message
        Parser docker

    [FILTER]
        Name nest
        Match kube.*
        Operation nest
        Wildcard *
        Nest_under payload
        
    [FILTER]
        Name kubernetes
        Match kube.*
        Merge_Log On
        Keep_Log On

    [FILTER]
        Name Lua
        Match kube.*
        call remap
        code function remap(tag, timestamp, record) record["pod"] = record["kubernetes"]["pod_name"] record["container"] = record["kubernetes"]["container_name"] record["metadata"] = { namespace = record["kubernetes"]["namespace_name"], labels = record["kubernetes"]["labels"], annotations = record["kubernetes"]["annotations"]} record["metadata"]["labels"]["node"] = record["kubernetes"]["host"] return 1, timestamp, record end

    [FILTER]
        Name Lua
        Match kube.*
        call setResourceID
        script ../scripts/uuid

    [FILTER]
        Name modify
        Match kube.*
        Remove kubernetes


luaScripts:
  uuid: |
    math.randomseed( os.time() )
    math.random()

    local function num2bs(num)
      local _mod = math.fmod or math.mod
      local _floor = math.floor
      --
      local result = ""
      if(num == 0) then return "0" end
      while(num  > 0) do
         result = _mod(num,2) .. result
         num = _floor(num*0.5)
      end              
      return result
    end

    local function bs2num(num)
      local _sub = string.sub
      local index, result = 0, 0
      if(num == "0") then return 0; end
      for p=#num,1,-1 do
        local this_val = _sub( num, p,p )
        if this_val == "1" then
          result = result + ( 2^index )
        end
        index=index+1
      end
      return result
    end

    local function padbits(num,bits)
      if #num == bits then return num end
      if #num > bits then print("too many bits") end
      local pad = bits - #num
      for i=1,pad do
        num = "0" .. num
      end
      return num
    end

    local function getUUID()
      local _rnd = math.random
      local _fmt = string.format
      --
      _rnd()
      --
      local time_low_a = _rnd(0, 65535)
      local time_low_b = _rnd(0, 65535)
      --
      local time_mid = _rnd(0, 65535)
      --
      local time_hi = _rnd(0, 4095 )
      time_hi = padbits( num2bs(time_hi), 12 )
      local time_hi_and_version = bs2num( "0100" .. time_hi )
      --
      local clock_seq_hi_res = _rnd(0,63)
      clock_seq_hi_res = padbits( num2bs(clock_seq_hi_res), 6 )
      clock_seq_hi_res = "10" .. clock_seq_hi_res 
      --
      local clock_seq_low = _rnd(0,255)
      clock_seq_low = padbits( num2bs(clock_seq_low), 8 )
      --
      local clock_seq = bs2num(clock_seq_hi_res .. clock_seq_low)
      --
      local node = {}
      for i=1,6 do
        node[i] = _rnd(0,255)
      end
      --
      local guid = ""
      guid = guid .. padbits(_fmt("%X",time_low_a), 4)
      guid = guid .. padbits(_fmt("%X",time_low_b), 4) .. "-"
      guid = guid .. padbits(_fmt("%X",time_mid), 4) .. "-"
      guid = guid .. padbits(_fmt("%X",time_hi_and_version), 4) .. "-"
      guid = guid .. padbits(_fmt("%X",clock_seq), 4) .. "-"
      --
      for i=1,6 do
        guid = guid .. padbits(_fmt("%X",node[i]), 2)
      end
      --
      return guid
    end
    
    function setResourceID(tag, timestamp, record)
      record["metadata"]["uid"] = getUUID()
      return 1, timestamp, record
    end
